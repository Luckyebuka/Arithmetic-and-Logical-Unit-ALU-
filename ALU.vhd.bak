library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

entity ALU is
    generic (
        bit_depth : integer := 32
    );
    port (
        result  : out std_logic_vector(bit_depth-1 downto 0);
        Error   : out std_logic;
        A       : in std_logic_vector(bit_depth-1 downto 0);
        B       : in std_logic_vector(bit_depth-1 downto 0);
        Opcode  : in std_logic_vector(3 downto 0)
    );
end ALU;

architecture behavioral of ALU is
begin
    process (A, B, Opcode)
    variable temp_result : std_logic_vector(bit_depth-1 downto 0);
    begin
        Error <= '0';  -- Initialize error signal
        
        case Opcode is
            when "0000" =>
                -- OpCode 0: Not A
                temp_result <= not A;
                
            when "0001" =>
                -- OpCode 1: Not B
                temp_result <= not B;
                
            when "0010" =>
                -- OpCode 2: A + B
                temp_result <= std_logic_vector(signed(A) + signed(B));
                
            when "0011" =>
                -- OpCode 3: A - B
                temp_result <= std_logic_vector(signed (A) - signed(B));
                
            when "0100" =>
                -- OpCode 4: Shift A left by 1 (multiply by 2)
                temp_result <= std_logic_vector('0' & A(bit_depth-2 downto 0)) when A(bit_depth-1) = '0' else (others => 'X');
                
            when "0101" =>
                -- OpCode 5: Sign shift A right by 2 bits (divide by 4)
                temp_result <= std_logic_vector(A(bit_depth-1) & A(bit_depth-2 downto 2)) when A(bit_depth-1) = '1' else (others => 'X');
                
            when "0110" =>
                -- OpCode 6: Shift B right by 1 (multiply by 2)
                temp_result <= ('0' & B(bit_depth-2 downto 0));
                
            when "0111" =>
                -- OpCode 7: Sign shift B right by 2 bits (divide by 4)
                temp_result <= std_logic_vector(B(bit_depth-2 downto 0) & "00") when B(bit_depth-1) = '1' else (others => 'X');
                
            when "1000" =>
                -- OpCode 8: Flip the bits of A
                temp_result <= not A;
                
            when "1001" =>
                -- OpCode 9: Flip the bits of B
                temp_result := not B;
                
            when "1010" =>
                -- OpCode 10: A AND B
                temp_result <= A and B;
                
            when "1011" =>
                -- OpCode 11: A OR B
                temp_result <= A or B;
                
            when others =>
                -- OpCode 12: ERROR
                Error <= '1';
                temp_result <= (others => 'X');  -- Set result to 'X' for error
        end case;
        
        result <= temp_result;
    end process;
end behavioral;
